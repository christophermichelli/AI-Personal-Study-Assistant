# -*- coding: utf-8 -*-
"""Personal Study Assistant

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bQ8jtsq2a197TfcHuW5Om6I2-Y79UBBe

Install Packages
"""

!pip install scikit-learn gradio pandas

"""Import Libraries"""

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsRegressor
import gradio as gr
import random

"""Predicitng Weak Topics Using Machine Learning"""

def recommend_topics_knn(user_grades, top_n=3):
    # Simulate other students for ML
    simulated_students = []
    topics = list(user_grades.keys())
    for _ in range(20):  # 20 simulated students
        student = {t: random.randint(50, 100) for t in topics}
        simulated_students.append(student)

    df = pd.DataFrame(simulated_students)
    df = pd.concat([df, pd.DataFrame([user_grades])], ignore_index=True)

    predictions = {}
    for topic in topics:
        X_train = df.drop(columns=[topic])
        y_train = df[topic]
        model = KNeighborsRegressor(n_neighbors=3)
        model.fit(X_train, y_train)
        X_user = pd.DataFrame([user_grades]).drop(columns=[topic])
        pred = model.predict(X_user)[0]
        predictions[topic] = pred

    recommended = sorted(predictions, key=predictions.get)[:top_n]
    return recommended

"""Generated Study Plan"""

def generate_study_plan(user_grades, daily_hours, days_per_week):
    weak_topics = recommend_topics_knn(user_grades, top_n=3)
    total_minutes = daily_hours * 60
    weights = {t: (100 - user_grades[t]) for t in weak_topics}
    total_weight = sum(weights.values())
    schedule = {}

    for d in range(1, days_per_week+1):
        schedule[f"Day {d}"] = {}
        for topic in weak_topics:
            minutes = int((weights[topic] / total_weight) * total_minutes)
            schedule[f"Day {d}"][topic] = f"{minutes} min"
    return schedule, weak_topics

"""AI - Tips"""

def ai_advice(weak_topics, schedule):
    advice = f"Focus on the following subjects this week: {', '.join(weak_topics)}.\n"
    advice += "Follow this schedule to balance your study time without getting overwhelmed:\n"
    for day, topics in schedule.items():
        advice += f"{day}:\n"
        for topic, minutes in topics.items():
            advice += f"  - {topic}: {minutes}\n"
    advice += "\nTips:\n- Take short breaks every hour.\n- Start with the weakest topic first.\n- Stay consistent!"
    return advice

"""Machine Learning: Weekly Study Schedule

Gradio Interface
"""

def study_assistant(classes, grades, daily_hours, days_per_week):
    class_list = [c.strip() for c in classes.split(",")]
    grade_list = [int(g.strip()) for g in grades.split(",")]
    user_grades = dict(zip(class_list, grade_list))

    schedule, weak_topics = generate_study_plan(user_grades, daily_hours, days_per_week)
    advice_text = ai_advice(weak_topics, schedule)

    return advice_text, ", ".join(weak_topics)

demo = gr.Interface(
    fn=study_assistant,
    inputs=[
        gr.Textbox(label="Enter Classes (comma-separated)"),
        gr.Textbox(label="Enter Grades (comma-separated, same order)"),
        gr.Number(label="Daily Study Hours"),
        gr.Number(label="Days per Week")
    ],
    outputs=[
        gr.Textbox(label="AI Study Plan & Advice"),
        gr.Textbox(label="Focus Topics (Weakest)")
    ]
)

demo.launch(share=True)